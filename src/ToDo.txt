** Additional functionality ideas **
1. Add the feature to add groups
2. Re-define card UI for a modern look - Done
3. Resolve remaining bugs - Done
4. API to change password - Done
5. Comments - WIP


** Making columns sortable **

* Status: Complete

* DB changes *
1. In the database, add a new field called index, which will have a numeric value. - Done
2. When making a call to fetch states created by me, sort the values according to the index field. - Done

* API changes *
1. In the POST call to create a new state, send a new value for index, whose value will be cards.length - Done
2. Create a new API to update all the column states that have changed

* Front end changes *
1. Calculate the distance of the shift as D = newIndex - oldIndex.
    If D = 0; no shift has occured
    If D > 0; a column is moved from left to right, previous columns index upto distance D needs to be updated
    If D < 0; a column is moved from right to left, further columns ndex upto distance D needs to be updated
2. While we update StateCardArray with help of arrayMove, we will simultaneously update the state array.
3. The updated state array, active card's new index and the distance will be shared to an API.
4. The API will update the indices in the DB for a distance D.

** Adding Comments **

* Status - Complete

* DB changes *
1. Create a new DB called comments with the following structure
    comment: String
    User: Reference --> User table
    Created: Date

* API *
1. Create API to add a new comment
2. Create API to delete a comment. Deletion allowed only if user who added the comment and user who is logged in are same - Pending, dependency on adding teams

* UI *
1. Make GET call to fetch all comments
2. Design functions to make POST and DELETE calls

** Redefine home page **

* Status - WIP

* UI Changes *
Modify the homepage UI to give a more modern look
